[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nakamura\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nakamura\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.2)
[debug]       Load.loadUnit: plugins took 446.7969ms
[debug]       Load.loadUnit: defsScala took 0.5966ms
[debug] [Loading] Scanning directory C:\Users\nakamura\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nakamura\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 38.7763 ms
[debug]           Load.resolveProject(global-plugins) took 86.1687ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nakamura\.sbt\1.0\plugins, plugins: List(<none>))) took 203.0219ms
[debug] [Loading] Done in C:\Users\nakamura\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 242.8392ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5116ms
[debug]     Load.loadUnit(file:/C:/Users/nakamura/.sbt/1.0/plugins/, ...) took 709.7822ms
[debug]   Load.apply: load took 1038.6532ms
[debug]   Load.apply: resolveProjects took 8.2607ms
[debug]   Load.apply: finalTransforms took 94.3048ms
[debug]   Load.apply: config.delegates took 13.3938ms
[debug]   Load.apply: Def.make(settings)... took 677.5514ms
[debug]   Load.apply: structureIndex took 157.0145ms
[debug]   Load.apply: mkStreams took 2.7322ms
[info] loading global plugins from C:\Users\nakamura\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4095.066ms
[debug]           Load.loadUnit: plugins took 39.8238ms
[debug]           Load.loadUnit: defsScala took 0.0099ms
[debug] [Loading] Scanning directory C:\Users\nakamura\workspace\leetcode-study\project
[debug]             Load.loadUnit: mkEval took 15.9854ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nakamura\workspace\leetcode-study\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.1888 ms
[info] loading settings for project leetcode-study-build from idea.sbt ...
[debug]               Load.resolveProject(leetcode-study-build) took 3.8816ms
[debug]             Load.loadTransitive: finalizeProject(Project(id leetcode-study-build, base: C:\Users\nakamura\workspace\leetcode-study\project, plugins: List(<none>))) took 6.9576ms
[debug] [Loading] Done in C:\Users\nakamura\workspace\leetcode-study\project, returning: (leetcode-study-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3726.7479ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.3571ms
[debug]         Load.loadUnit(file:/C:/Users/nakamura/workspace/leetcode-study/project/, ...) took 3775.3677ms
[debug]       Load.apply: load took 3778.186ms
[debug]       Load.apply: resolveProjects took 0.1362ms
[debug]       Load.apply: finalTransforms took 12.9317ms
[debug]       Load.apply: config.delegates took 0.6737ms
[debug]       Load.apply: Def.make(settings)... took 116.6891ms
[debug]       Load.apply: structureIndex took 36.1791ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\Users\nakamura\workspace\leetcode-study\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5651.3366ms
[debug]     Load.loadUnit: defsScala took 0.0061ms
[debug] [Loading] Scanning directory C:\Users\nakamura\workspace\leetcode-study
[debug]       Load.loadUnit: mkEval took 0.2797ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3635 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 49.5553ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\nakamura\workspace\leetcode-study, plugins: List(<none>))) took 54.5377ms
[debug] [Loading] Done in C:\Users\nakamura\workspace\leetcode-study, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1502.9975ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.0197ms
[debug]   Load.loadUnit(file:/C:/Users/nakamura/workspace/leetcode-study/, ...) took 7170.2828ms
[debug] Load.apply: load took 7172.2713ms
[debug] Load.apply: resolveProjects took 0.1032ms
[debug] Load.apply: finalTransforms took 24.9764ms
[debug] Load.apply: config.delegates took 0.4102ms
[debug] Load.apply: Def.make(settings)... took 81.9674ms
[debug] Load.apply: structureIndex took 22.5336ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to leetcode-study (in build file:/C:/Users/nakamura/workspace/leetcode-study/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57914 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57914, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to leetcode-study (in build file:/C:/Users/nakamura/workspace/leetcode-study/)
[debug] > Exec(idea-shell, None, None)
